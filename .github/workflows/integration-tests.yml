name: Integration Tests

on:
  # Only run on manual trigger or scheduled
  workflow_dispatch:
    inputs:
      provider:
        description: 'Test provider (aws, azure, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - aws
          - azure
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-aws:
    name: Test AWS Modules
    runs-on: ubuntu-latest
    if: github.event.inputs.provider == 'aws' || github.event.inputs.provider == 'all' || github.event_name == 'schedule'

    permissions:
      id-token: write  # Required for OIDC
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TEST_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: TerratestSession

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: tests
        run: |
          go mod download
          go mod verify

      - name: Run S3 integration tests
        working-directory: tests/integration
        run: |
          go test -v -timeout 45m -parallel 2 -run "TestS3"
        env:
          AWS_DEFAULT_REGION: us-east-1

      - name: Cleanup orphaned resources (if test fails)
        if: failure()
        run: |
          # Clean up any test resources that might be left behind
          aws s3api list-buckets --query 'Buckets[?contains(Name, `test-auditledger`)].Name' --output text | \
            xargs -I {} aws s3 rb s3://{} --force || true

  test-azure:
    name: Test Azure Modules
    runs-on: ubuntu-latest
    if: github.event.inputs.provider == 'azure' || github.event.inputs.provider == 'all' || github.event_name == 'schedule'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download Go dependencies
        working-directory: tests
        run: |
          go mod download
          go mod verify

      - name: Run Azure integration tests
        working-directory: tests/integration
        run: |
          go test -v -timeout 45m -parallel 2 -run "TestAzure"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Cleanup orphaned resources (if test fails)
        if: failure()
        run: |
          # Clean up test resource groups
          az group list --tag ManagedBy=Terratest --query "[].name" -o tsv | \
            xargs -I {} az group delete --name {} --yes --no-wait || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-aws, test-azure]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-aws.result }}" == "failure" ] || [ "${{ needs.test-azure.result }}" == "failure" ]; then
            echo "‚ùå Integration tests failed"
            exit 1
          else
            echo "‚úÖ All integration tests passed"
          fi

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Nightly integration tests failed',
              body: 'The nightly integration test run failed. Please review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).',
              labels: ['bug', 'testing', 'ci']
            })
